Subleq Python Interpreter
Written by Chris Lloyd in 2013
Language Python 3.3 
Released Under the GNU General Public License

Class Overview:
    1. SubleqParser - Converts the subleq input into an integer array
    2. SubleqVM     - Interprets the integer array
    3. subleq.py    - Provides a simple interface for executing subleq files (Optional)

Interpret Subleq Command: python subleq.py <inputfile>

What is Subleq?
    Subleq stands for Subtract and Branch if Less than or Equal to zero. Basically it 
    subtracts two places in memory and if the difference is greater than zero it goes 
    to the next instruction otherwise it jumps to a specific place in memory.

    It is interesting because this single operation allows the language to be turning complete. It 
    is possible to emulate many higher level instructions with just a few subleq instructions. See the Wikipedia article for the emulations.

    These are some really great resources to learn more: 
        http://en.wikipedia.org/wiki/One_instruction_set_computer
        http://mazonka.com/subleq/
        http://esolangs.org/wiki/Subleq

Implementation Specific Subleq Syntax:
    Since there is only one operation (subleq) there are no opcodes.
    The basic command is a b c; where a b, and c are addresses in memory
    When c is left off it is implied to be the next instruction 
    When b and c are left off the command is implied to be a a next instruction
    Semicolons denote the end of a statement as does the end of a line.
    Periods denote the start of a block of memory which ends at the end of the line.
    A label takes the form <labelname>:
    And the question mark represents it's address plus one.
    The number sign starts a comment which ends and the end at the next semicolon
    Calling subleq with b as -2 outputs the value in register a
    Calling subleq with b as -1 gets input and puts it in register a
    Calling subleq with c as -2 will exit the program if 

Simple examples:

Do Nothing:
    z z -2 # Exit
    . z:0  # Make label pointing to value 0

Get Input and Print It:
    # If the input is more than one character it's stored in an input buffer, 
    # each call of -1 will get the next element in the buffer
    a -1       # get input and put it in a
    a -2       # print value at a which is input
    z z -2     # otherwise the vm would try to run the scratch memory below
    . a:0 z:0  # Dot tells parser these are not commands, set labels z to 0 and a to 0 

See http://mazonka.com/subleq/ for a hello world example, only the complex example will compile
with the following changes:
    (-1) -> -2
    z z 0 -> z z -2

Please let me know of any bugs and feel free to ask if you have any questions - Chris Lloyd